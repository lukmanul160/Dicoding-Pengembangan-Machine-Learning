# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pMI26u2djBCZjhS9a6P6k6lRjZ3YuNuD
"""

#install the depedencies
!pip install kaggle

#upload the file json
from google.colab import files
files.upload()

!mkdir ~p ~/.kaggle
!cp kaggle.json ~/.kaggle/
#change the permission
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d iarunava/cell-images-for-detecting-malaria

from zipfile import ZipFile
file_name = "cell-images-for-detecting-malaria.zip"

with ZipFile(file_name,'r') as zip :
  zip.extractall()
  print("Done")

import numpy as np
import matplotlib.pyplot as plt
import cv2
import os
import tensorflow as tf
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Conv2D,MaxPool2D,Dropout,Flatten,Dense,BatchNormalization
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing import image

Parasitized_cell=os.listdir('/content/cell_images/Parasitized/')
uninfected_cell=os.listdir('/content/cell_images/Uninfected/')

print("Terinfeksi Malaria:",len(Parasitized_cell))
print("Tidak Terinfeksi malaria:",len(uninfected_cell))

for i in range(3):
    img=cv2.imread('/content/cell_images/Parasitized/'+Parasitized_cell[i])
    plt.imshow(img)
    plt.title("Terinfeksi Malaria")
    plt.show()

for i in range(3):
    img=cv2.imread('/content/cell_images/Uninfected/'+uninfected_cell[i])
    plt.imshow(img)
    plt.title("Tidak Terinfeksi Malaria")
    plt.show()

panjang = 68
tinggi = 68

datagen = ImageDataGenerator(rescale=1/255.0, validation_split=0.2)

trainDatagen = datagen.flow_from_directory(directory='/content/cell_images/cell_images/',
                                           target_size=(panjang,tinggi),
                                           class_mode = 'binary',
                                           batch_size = 16,
                                           subset='training')

valDatagen = datagen.flow_from_directory(directory='/content/cell_images/cell_images/',
                                           target_size=(panjang,tinggi),
                                           class_mode = 'binary',
                                           batch_size = 16,
                                           subset='validation')

model = Sequential([
        Conv2D(16,(3,3),activation='relu',input_shape=(panjang,tinggi,3)),
        MaxPool2D(2,2),
        Dropout(0.2),
        Conv2D(64,(3,3),activation='relu'),
        Dropout(0.2),
        MaxPool2D(2,2),
        Dropout(0.3),
        Flatten(),
        Dense(64,activation='relu'),
        Dropout(0.5),
        Dense(1,activation='sigmoid')
])

model.summary()

model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.95):
      print("\nAkurasi telah mencapai >95%!")
      self.model.stop_training = True
callbacks = myCallback()

history=model.fit_generator(generator=trainDatagen,
                            steps_per_epoch=len(trainDatagen),
                            epochs=8,
                            validation_data=valDatagen ,
                            validation_steps=len(valDatagen),
                            callbacks=[callbacks]
                           )

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epochs')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epochs')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

with tf.io.gfile.GFile('model.tflite', 'wb') as f:
  f.write(tflite_model)

